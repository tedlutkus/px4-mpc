
/*
Auto-generated by CVXPYgen on November 04, 2024 at 14:11:49.
Content: Python binding with pybind11.
*/

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <ctime>
#include "cpg_module.hpp"

extern "C" {
    #include "include/cpg_workspace.h"
    #include "include/cpg_solve.h"
}

namespace py = pybind11;

static int i;

CPG_Result_cpp_t solve_cpp(struct CPG_Updated_cpp_t& CPG_Updated_cpp, struct CPG_Params_cpp_t& CPG_Params_cpp){

    // Pass changed user-defined parameter values to the solver
    if (CPG_Updated_cpp.param5) {
        for(i=0; i<13; i++) {
            cpg_update_param5(i, CPG_Params_cpp.param5[i]);
        }
    }
    if (CPG_Updated_cpp.param1) {
        for(i=0; i<169; i++) {
            cpg_update_param1(i, CPG_Params_cpp.param1[i]);
        }
    }
    if (CPG_Updated_cpp.param2) {
        for(i=0; i<52; i++) {
            cpg_update_param2(i, CPG_Params_cpp.param2[i]);
        }
    }

    // Solve
    std::clock_t ASA_start = std::clock();
    cpg_solve();
    std::clock_t ASA_end = std::clock();

    // Arrange and return results
    CPG_Prim_cpp_t CPG_Prim_cpp {};
    for(i=0; i<143; i++) {
        CPG_Prim_cpp.var4[i] = CPG_Prim.var4[i];
    }
    for(i=0; i<40; i++) {
        CPG_Prim_cpp.var3[i] = CPG_Prim.var3[i];
    }
    CPG_Dual_cpp_t CPG_Dual_cpp {};
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d0[i] = CPG_Dual.d0[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d1[i] = CPG_Dual.d1[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d2[i] = CPG_Dual.d2[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d3[i] = CPG_Dual.d3[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d4[i] = CPG_Dual.d4[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d5[i] = CPG_Dual.d5[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d6[i] = CPG_Dual.d6[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d7[i] = CPG_Dual.d7[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d8[i] = CPG_Dual.d8[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d9[i] = CPG_Dual.d9[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d10[i] = CPG_Dual.d10[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d11[i] = CPG_Dual.d11[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d12[i] = CPG_Dual.d12[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d13[i] = CPG_Dual.d13[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d14[i] = CPG_Dual.d14[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d15[i] = CPG_Dual.d15[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d16[i] = CPG_Dual.d16[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d17[i] = CPG_Dual.d17[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d18[i] = CPG_Dual.d18[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d19[i] = CPG_Dual.d19[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d20[i] = CPG_Dual.d20[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d21[i] = CPG_Dual.d21[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d22[i] = CPG_Dual.d22[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d23[i] = CPG_Dual.d23[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d24[i] = CPG_Dual.d24[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d25[i] = CPG_Dual.d25[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d26[i] = CPG_Dual.d26[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d27[i] = CPG_Dual.d27[i];
    }
    for(i=0; i<13; i++) {
        CPG_Dual_cpp.d28[i] = CPG_Dual.d28[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d29[i] = CPG_Dual.d29[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d30[i] = CPG_Dual.d30[i];
    }
    CPG_Info_cpp_t CPG_Info_cpp {};
    CPG_Info_cpp.obj_val = CPG_Info.obj_val;
    CPG_Info_cpp.iter = CPG_Info.iter;
    CPG_Info_cpp.status = CPG_Info.status;
    CPG_Info_cpp.pri_res = CPG_Info.pri_res;
    CPG_Info_cpp.dua_res = CPG_Info.dua_res;
    CPG_Info_cpp.time = 1.0 * (ASA_end - ASA_start) / CLOCKS_PER_SEC;
    CPG_Result_cpp_t CPG_Result_cpp {};
    CPG_Result_cpp.prim = CPG_Prim_cpp;
    CPG_Result_cpp.dual = CPG_Dual_cpp;
    CPG_Result_cpp.info = CPG_Info_cpp;
    return CPG_Result_cpp;

}

PYBIND11_MODULE(cpg_module, m) {

    py::class_<CPG_Params_cpp_t>(m, "cpg_params")
            .def(py::init<>())
            .def_readwrite("param5", &CPG_Params_cpp_t::param5)
            .def_readwrite("param1", &CPG_Params_cpp_t::param1)
            .def_readwrite("param2", &CPG_Params_cpp_t::param2)
            ;

    py::class_<CPG_Updated_cpp_t>(m, "cpg_updated")
            .def(py::init<>())
            .def_readwrite("param5", &CPG_Updated_cpp_t::param5)
            .def_readwrite("param1", &CPG_Updated_cpp_t::param1)
            .def_readwrite("param2", &CPG_Updated_cpp_t::param2)
            ;

    py::class_<CPG_Prim_cpp_t>(m, "cpg_prim")
            .def(py::init<>())
            .def_readwrite("var4", &CPG_Prim_cpp_t::var4)
            .def_readwrite("var3", &CPG_Prim_cpp_t::var3)
            ;

    py::class_<CPG_Dual_cpp_t>(m, "cpg_dual")
            .def(py::init<>())
            .def_readwrite("d0", &CPG_Dual_cpp_t::d0)
            .def_readwrite("d1", &CPG_Dual_cpp_t::d1)
            .def_readwrite("d2", &CPG_Dual_cpp_t::d2)
            .def_readwrite("d3", &CPG_Dual_cpp_t::d3)
            .def_readwrite("d4", &CPG_Dual_cpp_t::d4)
            .def_readwrite("d5", &CPG_Dual_cpp_t::d5)
            .def_readwrite("d6", &CPG_Dual_cpp_t::d6)
            .def_readwrite("d7", &CPG_Dual_cpp_t::d7)
            .def_readwrite("d8", &CPG_Dual_cpp_t::d8)
            .def_readwrite("d9", &CPG_Dual_cpp_t::d9)
            .def_readwrite("d10", &CPG_Dual_cpp_t::d10)
            .def_readwrite("d11", &CPG_Dual_cpp_t::d11)
            .def_readwrite("d12", &CPG_Dual_cpp_t::d12)
            .def_readwrite("d13", &CPG_Dual_cpp_t::d13)
            .def_readwrite("d14", &CPG_Dual_cpp_t::d14)
            .def_readwrite("d15", &CPG_Dual_cpp_t::d15)
            .def_readwrite("d16", &CPG_Dual_cpp_t::d16)
            .def_readwrite("d17", &CPG_Dual_cpp_t::d17)
            .def_readwrite("d18", &CPG_Dual_cpp_t::d18)
            .def_readwrite("d19", &CPG_Dual_cpp_t::d19)
            .def_readwrite("d20", &CPG_Dual_cpp_t::d20)
            .def_readwrite("d21", &CPG_Dual_cpp_t::d21)
            .def_readwrite("d22", &CPG_Dual_cpp_t::d22)
            .def_readwrite("d23", &CPG_Dual_cpp_t::d23)
            .def_readwrite("d24", &CPG_Dual_cpp_t::d24)
            .def_readwrite("d25", &CPG_Dual_cpp_t::d25)
            .def_readwrite("d26", &CPG_Dual_cpp_t::d26)
            .def_readwrite("d27", &CPG_Dual_cpp_t::d27)
            .def_readwrite("d28", &CPG_Dual_cpp_t::d28)
            .def_readwrite("d29", &CPG_Dual_cpp_t::d29)
            .def_readwrite("d30", &CPG_Dual_cpp_t::d30)
            ;

    py::class_<CPG_Info_cpp_t>(m, "cpg_info")
            .def(py::init<>())
            .def_readwrite("obj_val", &CPG_Info_cpp_t::obj_val)
            .def_readwrite("iter", &CPG_Info_cpp_t::iter)
            .def_readwrite("status", &CPG_Info_cpp_t::status)
            .def_readwrite("pri_res", &CPG_Info_cpp_t::pri_res)
            .def_readwrite("dua_res", &CPG_Info_cpp_t::dua_res)
            .def_readwrite("time", &CPG_Info_cpp_t::time)
            ;

    py::class_<CPG_Result_cpp_t>(m, "cpg_result")
            .def(py::init<>())
            .def_readwrite("cpg_prim", &CPG_Result_cpp_t::prim)
            .def_readwrite("cpg_dual", &CPG_Result_cpp_t::dual)
            .def_readwrite("cpg_info", &CPG_Result_cpp_t::info)
            ;

    m.def("solve", &solve_cpp);

    m.def("set_solver_default_settings", &cpg_set_solver_default_settings);
    m.def("set_solver_rho", &cpg_set_solver_rho);
    m.def("set_solver_max_iter", &cpg_set_solver_max_iter);
    m.def("set_solver_eps_abs", &cpg_set_solver_eps_abs);
    m.def("set_solver_eps_rel", &cpg_set_solver_eps_rel);
    m.def("set_solver_eps_prim_inf", &cpg_set_solver_eps_prim_inf);
    m.def("set_solver_eps_dual_inf", &cpg_set_solver_eps_dual_inf);
    m.def("set_solver_alpha", &cpg_set_solver_alpha);
    m.def("set_solver_scaled_termination", &cpg_set_solver_scaled_termination);
    m.def("set_solver_check_termination", &cpg_set_solver_check_termination);
    m.def("set_solver_warm_start", &cpg_set_solver_warm_start);

}
